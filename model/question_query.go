// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set QuestionLibraryQuerySet

// QuestionLibraryQuerySet is an queryset type for QuestionLibrary
type QuestionLibraryQuerySet struct {
	db *gorm.DB
}

// NewQuestionLibraryQuerySet constructs new QuestionLibraryQuerySet
func NewQuestionLibraryQuerySet(db *gorm.DB) QuestionLibraryQuerySet {
	return QuestionLibraryQuerySet{
		db: db.Model(&QuestionLibrary{}),
	}
}

func (qs QuestionLibraryQuerySet) w(db *gorm.DB) QuestionLibraryQuerySet {
	return NewQuestionLibraryQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) All(ret *[]QuestionLibrary) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *QuestionLibrary) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) CreatedAtEq(createdAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) CreatedAtGt(createdAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) CreatedAtGte(createdAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) CreatedAtLt(createdAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) CreatedAtLte(createdAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) CreatedAtNe(createdAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *QuestionLibrary) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) Delete() error {
	return qs.db.Delete(QuestionLibrary{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(QuestionLibrary{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(QuestionLibrary{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtEq(deletedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtGt(deletedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtGte(deletedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtIsNotNull() QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtIsNull() QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtLt(deletedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtLte(deletedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DeletedAtNe(deletedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DifficultyEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyEq(difficulty int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("difficulty = ?", difficulty))
}

// DifficultyGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyGt(difficulty int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("difficulty > ?", difficulty))
}

// DifficultyGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyGte(difficulty int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("difficulty >= ?", difficulty))
}

// DifficultyIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyIn(difficulty ...int) QuestionLibraryQuerySet {
	if len(difficulty) == 0 {
		qs.db.AddError(errors.New("must at least pass one difficulty in DifficultyIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("difficulty IN (?)", difficulty))
}

// DifficultyLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyLt(difficulty int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("difficulty < ?", difficulty))
}

// DifficultyLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyLte(difficulty int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("difficulty <= ?", difficulty))
}

// DifficultyNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyNe(difficulty int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("difficulty != ?", difficulty))
}

// DifficultyNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) DifficultyNotIn(difficulty ...int) QuestionLibraryQuerySet {
	if len(difficulty) == 0 {
		qs.db.AddError(errors.New("must at least pass one difficulty in DifficultyNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("difficulty NOT IN (?)", difficulty))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) GetUpdater() QuestionLibraryUpdater {
	return NewQuestionLibraryUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDEq(ID uint) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDGt(ID uint) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDGte(ID uint) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDIn(ID ...uint) QuestionLibraryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDLt(ID uint) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDLte(ID uint) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDNe(ID uint) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) IDNotIn(ID ...uint) QuestionLibraryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// InspectPointEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) InspectPointEq(inspectPoint string) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("inspect_point = ?", inspectPoint))
}

// InspectPointIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) InspectPointIn(inspectPoint ...string) QuestionLibraryQuerySet {
	if len(inspectPoint) == 0 {
		qs.db.AddError(errors.New("must at least pass one inspectPoint in InspectPointIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("inspect_point IN (?)", inspectPoint))
}

// InspectPointNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) InspectPointNe(inspectPoint string) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("inspect_point != ?", inspectPoint))
}

// InspectPointNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) InspectPointNotIn(inspectPoint ...string) QuestionLibraryQuerySet {
	if len(inspectPoint) == 0 {
		qs.db.AddError(errors.New("must at least pass one inspectPoint in InspectPointNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("inspect_point NOT IN (?)", inspectPoint))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) Limit(limit int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) Offset(offset int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs QuestionLibraryQuerySet) One(ret *QuestionLibrary) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByCreatedAt() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByDeletedAt() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByDifficulty is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByDifficulty() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("difficulty ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByID() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByQuestionType is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByQuestionType() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("question_type ASC"))
}

// OrderAscBySecurityLevel is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscBySecurityLevel() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("security_level ASC"))
}

// OrderAscByStatus is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByStatus() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("status ASC"))
}

// OrderAscBySubject is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscBySubject() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("subject ASC"))
}

// OrderAscByTechType is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByTechType() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("tech_type ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderAscByUpdatedAt() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByCreatedAt() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByDeletedAt() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByDifficulty is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByDifficulty() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("difficulty DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByID() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByQuestionType is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByQuestionType() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("question_type DESC"))
}

// OrderDescBySecurityLevel is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescBySecurityLevel() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("security_level DESC"))
}

// OrderDescByStatus is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByStatus() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("status DESC"))
}

// OrderDescBySubject is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescBySubject() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("subject DESC"))
}

// OrderDescByTechType is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByTechType() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("tech_type DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) OrderDescByUpdatedAt() QuestionLibraryQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// QuestionTypeEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeEq(questionType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("question_type = ?", questionType))
}

// QuestionTypeGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeGt(questionType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("question_type > ?", questionType))
}

// QuestionTypeGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeGte(questionType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("question_type >= ?", questionType))
}

// QuestionTypeIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeIn(questionType ...int) QuestionLibraryQuerySet {
	if len(questionType) == 0 {
		qs.db.AddError(errors.New("must at least pass one questionType in QuestionTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("question_type IN (?)", questionType))
}

// QuestionTypeLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeLt(questionType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("question_type < ?", questionType))
}

// QuestionTypeLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeLte(questionType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("question_type <= ?", questionType))
}

// QuestionTypeNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeNe(questionType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("question_type != ?", questionType))
}

// QuestionTypeNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) QuestionTypeNotIn(questionType ...int) QuestionLibraryQuerySet {
	if len(questionType) == 0 {
		qs.db.AddError(errors.New("must at least pass one questionType in QuestionTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("question_type NOT IN (?)", questionType))
}

// SecurityLevelEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelEq(securityLevel int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("security_level = ?", securityLevel))
}

// SecurityLevelGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelGt(securityLevel int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("security_level > ?", securityLevel))
}

// SecurityLevelGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelGte(securityLevel int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("security_level >= ?", securityLevel))
}

// SecurityLevelIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelIn(securityLevel ...int) QuestionLibraryQuerySet {
	if len(securityLevel) == 0 {
		qs.db.AddError(errors.New("must at least pass one securityLevel in SecurityLevelIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("security_level IN (?)", securityLevel))
}

// SecurityLevelLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelLt(securityLevel int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("security_level < ?", securityLevel))
}

// SecurityLevelLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelLte(securityLevel int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("security_level <= ?", securityLevel))
}

// SecurityLevelNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelNe(securityLevel int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("security_level != ?", securityLevel))
}

// SecurityLevelNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SecurityLevelNotIn(securityLevel ...int) QuestionLibraryQuerySet {
	if len(securityLevel) == 0 {
		qs.db.AddError(errors.New("must at least pass one securityLevel in SecurityLevelNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("security_level NOT IN (?)", securityLevel))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetCreatedAt(createdAt time.Time) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetDeletedAt(deletedAt *time.Time) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDifficulty is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetDifficulty(difficulty int) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.Difficulty)] = difficulty
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetID(ID uint) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.ID)] = ID
	return u
}

// SetInspectPoint is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetInspectPoint(inspectPoint string) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.InspectPoint)] = inspectPoint
	return u
}

// SetQuestionType is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetQuestionType(questionType int) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.QuestionType)] = questionType
	return u
}

// SetSecurityLevel is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetSecurityLevel(securityLevel int) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.SecurityLevel)] = securityLevel
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetStatus(status int) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.Status)] = status
	return u
}

// SetSubject is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetSubject(subject int) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.Subject)] = subject
	return u
}

// SetTechType is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetTechType(techType int) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.TechType)] = techType
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) SetUpdatedAt(updatedAt time.Time) QuestionLibraryUpdater {
	u.fields[string(QuestionLibraryDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusEq(status int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusGt(status int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("status > ?", status))
}

// StatusGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusGte(status int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("status >= ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusIn(status ...int) QuestionLibraryQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status IN (?)", status))
}

// StatusLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusLt(status int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("status < ?", status))
}

// StatusLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusLte(status int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("status <= ?", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusNe(status int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) StatusNotIn(status ...int) QuestionLibraryQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", status))
}

// SubjectEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectEq(subject int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("subject = ?", subject))
}

// SubjectGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectGt(subject int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("subject > ?", subject))
}

// SubjectGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectGte(subject int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("subject >= ?", subject))
}

// SubjectIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectIn(subject ...int) QuestionLibraryQuerySet {
	if len(subject) == 0 {
		qs.db.AddError(errors.New("must at least pass one subject in SubjectIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("subject IN (?)", subject))
}

// SubjectLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectLt(subject int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("subject < ?", subject))
}

// SubjectLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectLte(subject int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("subject <= ?", subject))
}

// SubjectNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectNe(subject int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("subject != ?", subject))
}

// SubjectNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) SubjectNotIn(subject ...int) QuestionLibraryQuerySet {
	if len(subject) == 0 {
		qs.db.AddError(errors.New("must at least pass one subject in SubjectNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("subject NOT IN (?)", subject))
}

// TechTypeEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeEq(techType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("tech_type = ?", techType))
}

// TechTypeGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeGt(techType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("tech_type > ?", techType))
}

// TechTypeGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeGte(techType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("tech_type >= ?", techType))
}

// TechTypeIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeIn(techType ...int) QuestionLibraryQuerySet {
	if len(techType) == 0 {
		qs.db.AddError(errors.New("must at least pass one techType in TechTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("tech_type IN (?)", techType))
}

// TechTypeLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeLt(techType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("tech_type < ?", techType))
}

// TechTypeLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeLte(techType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("tech_type <= ?", techType))
}

// TechTypeNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeNe(techType int) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("tech_type != ?", techType))
}

// TechTypeNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) TechTypeNotIn(techType ...int) QuestionLibraryQuerySet {
	if len(techType) == 0 {
		qs.db.AddError(errors.New("must at least pass one techType in TechTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("tech_type NOT IN (?)", techType))
}

// Update is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u QuestionLibraryUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) UpdatedAtEq(updatedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) UpdatedAtGt(updatedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) UpdatedAtGte(updatedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) UpdatedAtLt(updatedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) UpdatedAtLte(updatedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs QuestionLibraryQuerySet) UpdatedAtNe(updatedAt time.Time) QuestionLibraryQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set QuestionLibraryQuerySet

// ===== BEGIN of QuestionLibrary modifiers

// QuestionLibraryDBSchemaField describes database schema field. It requires for method 'Update'
type QuestionLibraryDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f QuestionLibraryDBSchemaField) String() string {
	return string(f)
}

// QuestionLibraryDBSchema stores db field names of QuestionLibrary
var QuestionLibraryDBSchema = struct {
	ID            QuestionLibraryDBSchemaField
	CreatedAt     QuestionLibraryDBSchemaField
	UpdatedAt     QuestionLibraryDBSchemaField
	DeletedAt     QuestionLibraryDBSchemaField
	Subject       QuestionLibraryDBSchemaField
	QuestionType  QuestionLibraryDBSchemaField
	TechType      QuestionLibraryDBSchemaField
	SecurityLevel QuestionLibraryDBSchemaField
	Status        QuestionLibraryDBSchemaField
	Difficulty    QuestionLibraryDBSchemaField
	InspectPoint  QuestionLibraryDBSchemaField
}{

	ID:            QuestionLibraryDBSchemaField("id"),
	CreatedAt:     QuestionLibraryDBSchemaField("created_at"),
	UpdatedAt:     QuestionLibraryDBSchemaField("updated_at"),
	DeletedAt:     QuestionLibraryDBSchemaField("deleted_at"),
	Subject:       QuestionLibraryDBSchemaField("subject"),
	QuestionType:  QuestionLibraryDBSchemaField("question_type"),
	TechType:      QuestionLibraryDBSchemaField("tech_type"),
	SecurityLevel: QuestionLibraryDBSchemaField("security_level"),
	Status:        QuestionLibraryDBSchemaField("status"),
	Difficulty:    QuestionLibraryDBSchemaField("difficulty"),
	InspectPoint:  QuestionLibraryDBSchemaField("inspect_point"),
}

// Update updates QuestionLibrary fields by primary key
// nolint: dupl
func (o *QuestionLibrary) Update(db *gorm.DB, fields ...QuestionLibraryDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":             o.ID,
		"created_at":     o.CreatedAt,
		"updated_at":     o.UpdatedAt,
		"deleted_at":     o.DeletedAt,
		"subject":        o.Subject,
		"question_type":  o.QuestionType,
		"tech_type":      o.TechType,
		"security_level": o.SecurityLevel,
		"status":         o.Status,
		"difficulty":     o.Difficulty,
		"inspect_point":  o.InspectPoint,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update QuestionLibrary %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// QuestionLibraryUpdater is an QuestionLibrary updates manager
type QuestionLibraryUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewQuestionLibraryUpdater creates new QuestionLibrary updater
// nolint: dupl
func NewQuestionLibraryUpdater(db *gorm.DB) QuestionLibraryUpdater {
	return QuestionLibraryUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&QuestionLibrary{}),
	}
}

// ===== END of QuestionLibrary modifiers

// ===== BEGIN of query set QuestionQuerySet

// QuestionQuerySet is an queryset type for Question
type QuestionQuerySet struct {
	db *gorm.DB
}

// NewQuestionQuerySet constructs new QuestionQuerySet
func NewQuestionQuerySet(db *gorm.DB) QuestionQuerySet {
	return QuestionQuerySet{
		db: db.Model(&Question{}),
	}
}

func (qs QuestionQuerySet) w(db *gorm.DB) QuestionQuerySet {
	return NewQuestionQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) All(ret *[]Question) error {
	return qs.db.Find(ret).Error
}

// AnalysisEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) AnalysisEq(analysis string) QuestionQuerySet {
	return qs.w(qs.db.Where("analysis = ?", analysis))
}

// AnalysisIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) AnalysisIn(analysis ...string) QuestionQuerySet {
	if len(analysis) == 0 {
		qs.db.AddError(errors.New("must at least pass one analysis in AnalysisIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("analysis IN (?)", analysis))
}

// AnalysisNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) AnalysisNe(analysis string) QuestionQuerySet {
	return qs.w(qs.db.Where("analysis != ?", analysis))
}

// AnalysisNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) AnalysisNotIn(analysis ...string) QuestionQuerySet {
	if len(analysis) == 0 {
		qs.db.AddError(errors.New("must at least pass one analysis in AnalysisNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("analysis NOT IN (?)", analysis))
}

// ContentEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentEq(content int) QuestionQuerySet {
	return qs.w(qs.db.Where("content = ?", content))
}

// ContentGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentGt(content int) QuestionQuerySet {
	return qs.w(qs.db.Where("content > ?", content))
}

// ContentGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentGte(content int) QuestionQuerySet {
	return qs.w(qs.db.Where("content >= ?", content))
}

// ContentIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentIn(content ...int) QuestionQuerySet {
	if len(content) == 0 {
		qs.db.AddError(errors.New("must at least pass one content in ContentIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("content IN (?)", content))
}

// ContentLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentLt(content int) QuestionQuerySet {
	return qs.w(qs.db.Where("content < ?", content))
}

// ContentLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentLte(content int) QuestionQuerySet {
	return qs.w(qs.db.Where("content <= ?", content))
}

// ContentNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentNe(content int) QuestionQuerySet {
	return qs.w(qs.db.Where("content != ?", content))
}

// ContentNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) ContentNotIn(content ...int) QuestionQuerySet {
	if len(content) == 0 {
		qs.db.AddError(errors.New("must at least pass one content in ContentNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("content NOT IN (?)", content))
}

// Count is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Question) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) CreatedAtEq(createdAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) CreatedAtGt(createdAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) CreatedAtGte(createdAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) CreatedAtLt(createdAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) CreatedAtLte(createdAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) CreatedAtNe(createdAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) Delete() error {
	return qs.db.Delete(Question{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Question) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Question{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Question{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtEq(deletedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtGt(deletedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtGte(deletedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtIsNotNull() QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtIsNull() QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtLt(deletedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtLte(deletedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) DeletedAtNe(deletedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) GetUpdater() QuestionUpdater {
	return NewQuestionUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDEq(ID uint) QuestionQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDGt(ID uint) QuestionQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDGte(ID uint) QuestionQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDIn(ID ...uint) QuestionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDLt(ID uint) QuestionQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDLte(ID uint) QuestionQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDNe(ID uint) QuestionQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) IDNotIn(ID ...uint) QuestionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) Limit(limit int) QuestionQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) Offset(offset int) QuestionQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs QuestionQuerySet) One(ret *Question) error {
	return qs.db.First(ret).Error
}

// OrderAscByContent is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscByContent() QuestionQuerySet {
	return qs.w(qs.db.Order("content ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscByCreatedAt() QuestionQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscByDeletedAt() QuestionQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscByID() QuestionQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscBySortIndex is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscBySortIndex() QuestionQuerySet {
	return qs.w(qs.db.Order("sort_index ASC"))
}

// OrderAscByType is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscByType() QuestionQuerySet {
	return qs.w(qs.db.Order("type ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderAscByUpdatedAt() QuestionQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByContent is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescByContent() QuestionQuerySet {
	return qs.w(qs.db.Order("content DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescByCreatedAt() QuestionQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescByDeletedAt() QuestionQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescByID() QuestionQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescBySortIndex is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescBySortIndex() QuestionQuerySet {
	return qs.w(qs.db.Order("sort_index DESC"))
}

// OrderDescByType is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescByType() QuestionQuerySet {
	return qs.w(qs.db.Order("type DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) OrderDescByUpdatedAt() QuestionQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetAnalysis is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetAnalysis(analysis string) QuestionUpdater {
	u.fields[string(QuestionDBSchema.Analysis)] = analysis
	return u
}

// SetContent is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetContent(content int) QuestionUpdater {
	u.fields[string(QuestionDBSchema.Content)] = content
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetCreatedAt(createdAt time.Time) QuestionUpdater {
	u.fields[string(QuestionDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetDeletedAt(deletedAt *time.Time) QuestionUpdater {
	u.fields[string(QuestionDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetID(ID uint) QuestionUpdater {
	u.fields[string(QuestionDBSchema.ID)] = ID
	return u
}

// SetSortIndex is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetSortIndex(sortIndex int) QuestionUpdater {
	u.fields[string(QuestionDBSchema.SortIndex)] = sortIndex
	return u
}

// SetType is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetType(typeValue int) QuestionUpdater {
	u.fields[string(QuestionDBSchema.Type)] = typeValue
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) SetUpdatedAt(updatedAt time.Time) QuestionUpdater {
	u.fields[string(QuestionDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SortIndexEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexEq(sortIndex int) QuestionQuerySet {
	return qs.w(qs.db.Where("sort_index = ?", sortIndex))
}

// SortIndexGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexGt(sortIndex int) QuestionQuerySet {
	return qs.w(qs.db.Where("sort_index > ?", sortIndex))
}

// SortIndexGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexGte(sortIndex int) QuestionQuerySet {
	return qs.w(qs.db.Where("sort_index >= ?", sortIndex))
}

// SortIndexIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexIn(sortIndex ...int) QuestionQuerySet {
	if len(sortIndex) == 0 {
		qs.db.AddError(errors.New("must at least pass one sortIndex in SortIndexIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sort_index IN (?)", sortIndex))
}

// SortIndexLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexLt(sortIndex int) QuestionQuerySet {
	return qs.w(qs.db.Where("sort_index < ?", sortIndex))
}

// SortIndexLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexLte(sortIndex int) QuestionQuerySet {
	return qs.w(qs.db.Where("sort_index <= ?", sortIndex))
}

// SortIndexNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexNe(sortIndex int) QuestionQuerySet {
	return qs.w(qs.db.Where("sort_index != ?", sortIndex))
}

// SortIndexNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) SortIndexNotIn(sortIndex ...int) QuestionQuerySet {
	if len(sortIndex) == 0 {
		qs.db.AddError(errors.New("must at least pass one sortIndex in SortIndexNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sort_index NOT IN (?)", sortIndex))
}

// TypeEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeEq(typeValue int) QuestionQuerySet {
	return qs.w(qs.db.Where("type = ?", typeValue))
}

// TypeGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeGt(typeValue int) QuestionQuerySet {
	return qs.w(qs.db.Where("type > ?", typeValue))
}

// TypeGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeGte(typeValue int) QuestionQuerySet {
	return qs.w(qs.db.Where("type >= ?", typeValue))
}

// TypeIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeIn(typeValue ...int) QuestionQuerySet {
	if len(typeValue) == 0 {
		qs.db.AddError(errors.New("must at least pass one typeValue in TypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("type IN (?)", typeValue))
}

// TypeLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeLt(typeValue int) QuestionQuerySet {
	return qs.w(qs.db.Where("type < ?", typeValue))
}

// TypeLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeLte(typeValue int) QuestionQuerySet {
	return qs.w(qs.db.Where("type <= ?", typeValue))
}

// TypeNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeNe(typeValue int) QuestionQuerySet {
	return qs.w(qs.db.Where("type != ?", typeValue))
}

// TypeNotIn is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) TypeNotIn(typeValue ...int) QuestionQuerySet {
	if len(typeValue) == 0 {
		qs.db.AddError(errors.New("must at least pass one typeValue in TypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("type NOT IN (?)", typeValue))
}

// Update is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u QuestionUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) UpdatedAtEq(updatedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) UpdatedAtGt(updatedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) UpdatedAtGte(updatedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) UpdatedAtLt(updatedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) UpdatedAtLte(updatedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs QuestionQuerySet) UpdatedAtNe(updatedAt time.Time) QuestionQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set QuestionQuerySet

// ===== BEGIN of Question modifiers

// QuestionDBSchemaField describes database schema field. It requires for method 'Update'
type QuestionDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f QuestionDBSchemaField) String() string {
	return string(f)
}

// QuestionDBSchema stores db field names of Question
var QuestionDBSchema = struct {
	ID        QuestionDBSchemaField
	CreatedAt QuestionDBSchemaField
	UpdatedAt QuestionDBSchemaField
	DeletedAt QuestionDBSchemaField
	SortIndex QuestionDBSchemaField
	Type      QuestionDBSchemaField
	Content   QuestionDBSchemaField
	Analysis  QuestionDBSchemaField
}{

	ID:        QuestionDBSchemaField("id"),
	CreatedAt: QuestionDBSchemaField("created_at"),
	UpdatedAt: QuestionDBSchemaField("updated_at"),
	DeletedAt: QuestionDBSchemaField("deleted_at"),
	SortIndex: QuestionDBSchemaField("sort_index"),
	Type:      QuestionDBSchemaField("type"),
	Content:   QuestionDBSchemaField("content"),
	Analysis:  QuestionDBSchemaField("analysis"),
}

// Update updates Question fields by primary key
// nolint: dupl
func (o *Question) Update(db *gorm.DB, fields ...QuestionDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"sort_index": o.SortIndex,
		"type":       o.Type,
		"content":    o.Content,
		"analysis":   o.Analysis,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Question %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// QuestionUpdater is an Question updates manager
type QuestionUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewQuestionUpdater creates new Question updater
// nolint: dupl
func NewQuestionUpdater(db *gorm.DB) QuestionUpdater {
	return QuestionUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Question{}),
	}
}

// ===== END of Question modifiers

// ===== END of all query sets
