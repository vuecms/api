// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AccountQuerySet

// AccountQuerySet is an queryset type for Account
type AccountQuerySet struct {
	db *gorm.DB
}

// NewAccountQuerySet constructs new AccountQuerySet
func NewAccountQuerySet(db *gorm.DB) AccountQuerySet {
	return AccountQuerySet{
		db: db.Model(&Account{}),
	}
}

func (qs AccountQuerySet) w(db *gorm.DB) AccountQuerySet {
	return NewAccountQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Account) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Account) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// AgeEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeEq(age int) AccountQuerySet {
	return qs.w(qs.db.Where("age = ?", age))
}

// AgeGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeGt(age int) AccountQuerySet {
	return qs.w(qs.db.Where("age > ?", age))
}

// AgeGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeGte(age int) AccountQuerySet {
	return qs.w(qs.db.Where("age >= ?", age))
}

// AgeIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeIn(age ...int) AccountQuerySet {
	if len(age) == 0 {
		qs.db.AddError(errors.New("must at least pass one age in AgeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("age IN (?)", age))
}

// AgeLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeLt(age int) AccountQuerySet {
	return qs.w(qs.db.Where("age < ?", age))
}

// AgeLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeLte(age int) AccountQuerySet {
	return qs.w(qs.db.Where("age <= ?", age))
}

// AgeNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeNe(age int) AccountQuerySet {
	return qs.w(qs.db.Where("age != ?", age))
}

// AgeNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AgeNotIn(age ...int) AccountQuerySet {
	if len(age) == 0 {
		qs.db.AddError(errors.New("must at least pass one age in AgeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("age NOT IN (?)", age))
}

// All is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) All(ret *[]Account) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtEq(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtGt(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtGte(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtLt(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtLte(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtNe(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Delete() error {
	return qs.db.Delete(Account{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Account{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Account{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtEq(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtGt(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtGte(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtIsNotNull() AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtIsNull() AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtLt(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtLte(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtNe(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) GetUpdater() AccountUpdater {
	return NewAccountUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDEq(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDGt(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDGte(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDIn(ID ...uint) AccountQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDLt(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDLte(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDNe(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDNotIn(ID ...uint) AccountQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Limit(limit int) AccountQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Offset(offset int) AccountQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AccountQuerySet) One(ret *Account) error {
	return qs.db.First(ret).Error
}

// OrderAscByAge is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByAge() AccountQuerySet {
	return qs.w(qs.db.Order("age ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByCreatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByDeletedAt() AccountQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByID() AccountQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByPass is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByPass() AccountQuerySet {
	return qs.w(qs.db.Order("pass ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByUpdatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserName is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByUserName() AccountQuerySet {
	return qs.w(qs.db.Order("user_name ASC"))
}

// OrderDescByAge is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByAge() AccountQuerySet {
	return qs.w(qs.db.Order("age DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByCreatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByDeletedAt() AccountQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByID() AccountQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByPass is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByPass() AccountQuerySet {
	return qs.w(qs.db.Order("pass DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByUpdatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserName is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByUserName() AccountQuerySet {
	return qs.w(qs.db.Order("user_name DESC"))
}

// PassEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) PassEq(pass string) AccountQuerySet {
	return qs.w(qs.db.Where("pass = ?", pass))
}

// PassIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) PassIn(pass ...string) AccountQuerySet {
	if len(pass) == 0 {
		qs.db.AddError(errors.New("must at least pass one pass in PassIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("pass IN (?)", pass))
}

// PassLike is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) PassLike(pass string) AccountQuerySet {
	return qs.w(qs.db.Where("pass LIKE ?", pass))
}

// PassNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) PassNe(pass string) AccountQuerySet {
	return qs.w(qs.db.Where("pass != ?", pass))
}

// PassNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) PassNotIn(pass ...string) AccountQuerySet {
	if len(pass) == 0 {
		qs.db.AddError(errors.New("must at least pass one pass in PassNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("pass NOT IN (?)", pass))
}

// PassNotlike is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) PassNotlike(pass string) AccountQuerySet {
	return qs.w(qs.db.Where("pass NOT LIKE ?", pass))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtEq(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtGt(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtGte(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtLt(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtLte(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtNe(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserNameEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserNameEq(userName string) AccountQuerySet {
	return qs.w(qs.db.Where("user_name = ?", userName))
}

// UserNameIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserNameIn(userName ...string) AccountQuerySet {
	if len(userName) == 0 {
		qs.db.AddError(errors.New("must at least pass one userName in UserNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_name IN (?)", userName))
}

// UserNameLike is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserNameLike(userName string) AccountQuerySet {
	return qs.w(qs.db.Where("user_name LIKE ?", userName))
}

// UserNameNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserNameNe(userName string) AccountQuerySet {
	return qs.w(qs.db.Where("user_name != ?", userName))
}

// UserNameNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserNameNotIn(userName ...string) AccountQuerySet {
	if len(userName) == 0 {
		qs.db.AddError(errors.New("must at least pass one userName in UserNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_name NOT IN (?)", userName))
}

// UserNameNotlike is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserNameNotlike(userName string) AccountQuerySet {
	return qs.w(qs.db.Where("user_name NOT LIKE ?", userName))
}

// SetAge is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetAge(age int) AccountUpdater {
	u.fields[string(AccountDBSchema.Age)] = age
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetCreatedAt(createdAt time.Time) AccountUpdater {
	u.fields[string(AccountDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetDeletedAt(deletedAt *time.Time) AccountUpdater {
	u.fields[string(AccountDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetID(ID uint) AccountUpdater {
	u.fields[string(AccountDBSchema.ID)] = ID
	return u
}

// SetPass is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetPass(pass string) AccountUpdater {
	u.fields[string(AccountDBSchema.Pass)] = pass
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetUpdatedAt(updatedAt time.Time) AccountUpdater {
	u.fields[string(AccountDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserName is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetUserName(userName string) AccountUpdater {
	u.fields[string(AccountDBSchema.UserName)] = userName
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AccountUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AccountUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set AccountQuerySet

// ===== BEGIN of Account modifiers

// AccountDBSchemaField describes database schema field. It requires for method 'Update'
type AccountDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f AccountDBSchemaField) String() string {
	return string(f)
}

// AccountDBSchema stores db field names of Account
var AccountDBSchema = struct {
	ID        AccountDBSchemaField
	CreatedAt AccountDBSchemaField
	UpdatedAt AccountDBSchemaField
	DeletedAt AccountDBSchemaField
	UserName  AccountDBSchemaField
	Age       AccountDBSchemaField
	Pass      AccountDBSchemaField
}{

	ID:        AccountDBSchemaField("id"),
	CreatedAt: AccountDBSchemaField("created_at"),
	UpdatedAt: AccountDBSchemaField("updated_at"),
	DeletedAt: AccountDBSchemaField("deleted_at"),
	UserName:  AccountDBSchemaField("user_name"),
	Age:       AccountDBSchemaField("age"),
	Pass:      AccountDBSchemaField("pass"),
}

// Update updates Account fields by primary key
// nolint: dupl
func (o *Account) Update(db *gorm.DB, fields ...AccountDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"user_name":  o.UserName,
		"age":        o.Age,
		"pass":       o.Pass,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Account %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AccountUpdater is an Account updates manager
type AccountUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAccountUpdater creates new Account updater
// nolint: dupl
func NewAccountUpdater(db *gorm.DB) AccountUpdater {
	return AccountUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Account{}),
	}
}

// ===== END of Account modifiers

// ===== END of all query sets
